def renameConfig = [
        templateName             : "template",
        templateAppId            : "template.app.id",
        templateMaterialThemeName: "TemplateTheme",
        newTemplateName          : "Project",
        newTemplateAppId         : "domain.yourname.app",
        newMaterialThemeName     : "MyMaterialTheme",
        useHiltDependencies      : true,
        useRoomDependencies      : true,
        useRetrofitDependencies  : true,
        usePaparazziDependencies : true,
]

tasks.register('deleteSetupCode') {
    def workflowsFolder = "${rootDir}/.github/workflows"
    def buildscriptsFolder = "${rootDir}/buildscripts"
    def templateChangeWorkflowFile = "$workflowsFolder/template_change_test.yml"
    def setupGradle = "$buildscriptsFolder/setup.gradle"
    def renovateFile = "${rootDir}/renovate.json"

    doLast {
        removeTextFromFile("${rootDir}/build.gradle.kts", "setup.gradle")
        delete(templateChangeWorkflowFile)
        delete(setupGradle)
        delete(renovateFile)
    }
}

def modules = project.subprojects.collect { it.name }

// Rename For Main Package for each module
modules.each { module ->
    tasks.register("renameAppPackage${module}", Copy) {
        description "Renames the template package in the ${module} module."
        group null

        def newTemplateAppIdAsDirectory = renameConfig.newTemplateAppId.replaceAll("\\.", "/")
        def startingDirectory = "${rootDir}/${module}/src/main/java/${renameConfig.templateName}"
        def endingDirectory = "${rootDir}/${module}/src/main/java/${newTemplateAppIdAsDirectory}"

        from(startingDirectory)
        into(endingDirectory)

        // Replace package statements
        filter { line ->
            line.replaceAll(
                    "package ${renameConfig.templateName}",
                    "package ${renameConfig.newTemplateAppId}"
            )
        }

        // Replace import statements
        filter { line ->
            line.replaceAll(
                    "import ${renameConfig.templateName}",
                    "import ${renameConfig.newTemplateAppId}"
            )
        }

        // Replace Theme references. We can just replace on name,
        // which covers both imports and function calls.
        filter { line ->
            line.replaceAll(
                    "${renameConfig.templateMaterialThemeName}",
                    "${renameConfig.newMaterialThemeName}"
            )
        }

        doLast {
            delete(startingDirectory)
        }
    }
}

// Rename For androidTest Package for each module
modules.each { module ->
    tasks.register("renameAndroidTestPackage${module}", Copy) {
        description "Renames the template package in the androidTest ${module} package."
        group null

        def androidTestDir = "${rootDir}/${module}/src/androidTest/java/${renameConfig.templateName}"
        if (file(androidTestDir).exists()) {
            def newTemplateAppIdAsDirectory = renameConfig.newTemplateAppId.replaceAll("\\.", "/")
            def startingDirectory = "${rootDir}/${module}/src/androidTest/java/${renameConfig.templateName}"
            def endingDirectory = "${rootDir}/${module}/src/androidTest/java/${newTemplateAppIdAsDirectory}"

            from(startingDirectory)
            into(endingDirectory)

            // Replace package statements
            filter { line ->
                line.replaceAll(
                        "package ${renameConfig.templateName}",
                        "package ${renameConfig.newTemplateAppId}"
                )
            }

            // Replace import statements
            filter { line ->
                line.replaceAll(
                        "import ${renameConfig.templateName}",
                        "import ${renameConfig.newTemplateAppId}"
                )
            }

            doLast {
                delete(startingDirectory)
            }
        } else {
            println "androidTest directory not found for module: $module. Skipping androidTest package renaming."
        }

    }
}

// Rename For  Test Package for each module
modules.each { module ->
    tasks.register("renameTestPackage${module}", Copy) {
        description "Renames the template package in the test ${module} package."
        group null

        def testDir = "${rootDir}/${module}/src/test/java/${renameConfig.templateName}"
        if (file(testDir).exists()) {
            def newTemplateAppIdAsDirectory = renameConfig.newTemplateAppId.replaceAll("\\.", "/")
            def startingDirectory = "${rootDir}/${module}/src/test/java/${renameConfig.templateName}"
            def endingDirectory = "${rootDir}/${module}/src/test/java/${newTemplateAppIdAsDirectory}"

            from(startingDirectory)
            into(endingDirectory)

            // Replace package statements
            filter { line ->
                line.replaceAll(
                        "package ${renameConfig.templateName}",
                        "package ${renameConfig.newTemplateAppId}"
                )
            }

            // Replace import statements
            filter { line ->
                line.replaceAll(
                        "import ${renameConfig.templateName}",
                        "import ${renameConfig.newTemplateAppId}"
                )
            }

            doLast {
                delete(startingDirectory)
            }
        } else {
            println "test directory not found for module: $module. Skipping test package renaming."
        }

    }
}

tasks.register('replaceTemplateReferences') {
    description "Replaces references to template in various files."
    group null

    modules.each { module ->
        def moduleBuildFile = "${rootDir}/$module/build.gradle.kts"
        doLast {
            replaceTextInFile(
                    "${rootDir}/${module}/src/main/AndroidManifest.xml",
                    "${renameConfig.templateName}.MainActivity",
                    "${renameConfig.newTemplateAppId}.MainActivity",
            )
            replaceTextInFile(
                    moduleBuildFile,
                    "namespace = \"${renameConfig.templateName}\"",
                    "namespace = \"${renameConfig.newTemplateAppId}\""
            )

            replaceTextInFile(
                    "${rootDir}/${module}/build.gradle.kts",
                    "applicationId = \"${renameConfig.templateAppId}\"",
                    "applicationId = \"${renameConfig.newTemplateAppId}\"",
            )

            replaceTextInFile(
                    "${rootDir}/settings.gradle.kts",
                    "rootProject.name = \"${renameConfig.templateName}\"",
                    "rootProject.name = \"${renameConfig.newTemplateName}\"",
            )

            replaceTextInFile(
                    "${rootDir}/${module}/src/main/res/values/strings.xml",
                    "<string name=\"app_name\">${renameConfig.templateName}</string>",
                    "<string name=\"app_name\">${renameConfig.newTemplateName}</string>",
            )
            // Replace namespace in build.gradle.kts
            replaceTextInFile(
                    moduleBuildFile,
                    "namespace = \"${renameConfig.templateName}.${module}\"",
                    "namespace = \"${renameConfig.newTemplateAppId}.${module}\"",
            )
        }
    }
}

tasks.register('keepOrRemoveDependencies') {
    description "Keeps or removes certain dependencies defined in renameConfig."
    group null

    doLast {
        modules.each { module ->
            def filesWithDependencies = [
                    "${rootDir}/build.gradle.kts",
                    "${rootDir}/${module}/build.gradle.kts",
                    "${rootDir}/gradle/libs.versions.toml",
            ]

            filesWithDependencies.each { fileName ->
                if (renameConfig.useHiltDependencies != true) {
                    println("Removing hilt dependencies")
                    removeTextFromFile(fileName, "hilt")
                }

                if (renameConfig.useRoomDependencies != true) {
                    println("Removing room dependencies")
                    removeTextFromFile(fileName, "room")
                }

                if (renameConfig.useRetrofitDependencies != true) {
                    println("Removing retrofit dependencies")
                    removeTextFromFile(fileName, "retrofit")
                    removeTextFromFile(fileName, "moshi")
                }

                if (renameConfig.usePaparazziDependencies != true) {
                    println("Removing paparazzi dependencies")
                    removeTextFromFile(fileName, "paparazzi")
                }
            }
        }
    }
}

tasks.register('renameTemplate') {
    description "Runs all of the necessary template setup tasks based on the renameConfig."
    group "Template Setup"

    dependsOn(
            keepOrRemoveDependencies,
            replaceTemplateReferences,
            deleteSetupCode,
    )

    doLast {
        exec {
            // After all setup changes happen, run a `git add` so
            // folks can just immediately commit and push if they wish.
            commandLine "git", "add", "${rootDir}/."
        }
    }
}

tasks.register('renameAllModules') {
    description "Runs the template setup tasks for all modules."
    group "Template Setup"

    dependsOn modules.collect { tasks.named("renameAppPackage${it}") }
    dependsOn modules.collect { tasks.named("renameAndroidTestPackage${it}") }
    dependsOn modules.collect { tasks.named("renameTestPackage${it}") }
    dependsOn keepOrRemoveDependencies, replaceTemplateReferences, deleteSetupCode

    doLast {
        exec {
            commandLine "git", "add", "${rootDir}/."
        }
    }
}


/**
 * Replaces all instances of [text] in a given [fileName].
 */
static def replaceTextInFile(fileName, originalText, newText) {
    def file = new File(fileName)

    if (file.exists()) {
        file.text = file.text.replaceAll(originalText, newText)
    } else {
        println "File not found: $fileName"
    }
}

/**
 * Removes all lines from the given fileName that contain some supplied text.
 */
static def removeTextFromFile(fileName, text) {
    def file = new File(fileName)
    List fileLines = file.readLines()
    file.text = ""
    fileLines.each { line ->
        if (!line.contains(text)) {
            file.append(line)
            file.append("\n")
        }
    }
}
